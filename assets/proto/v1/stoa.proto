syntax = "proto3";

package github.com.vontikov.stoa.v1;
option go_package = ".;pb";

import "common.proto";
import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

// Entity is a Stoa entity.
message Entity {
  string entity_name = 1 [(validate.rules).string.min_len=1];
}

// ClientId contains Client ID.
message ClientId {
  string entity_name = 1;
  bytes id           = 2 [(validate.rules).bytes.min_len=1];
  bytes payload      = 3;
}

// Value contains an arbitrary data.
message Value {
  string entity_name = 1 [(validate.rules).string.min_len=1];
  bytes value        = 2 [(validate.rules).bytes.min_len = 1];
}

// Key contains Dictionary key.
message Key {
  string entity_name = 1 [(validate.rules).string.min_len=1];
  bytes  key         = 2 [(validate.rules).bytes.min_len = 1];
}

// KeyValue contains Dictionary key-value pair.
message KeyValue {
  string entity_name = 1 [(validate.rules).string.min_len=1];
  bytes key          = 2 [(validate.rules).bytes.min_len = 1];
  bytes value        = 3 [(validate.rules).bytes.min_len = 1];
}

// MutexStatus contains Mutex status returned by Watch call.
message MutexStatus {
  string entity_name = 1;
  bool locked        = 2;
}

// QueueStatus contains Queue status returned by Watch call.
message QueueStatus {
  string entity_name   = 1;
}

// ClusterStatus contains Mutex status returned by Watch call.
message ClusterStatus {
  Status s = 1;

  enum Status {
    RESERVED        = 0;
    LEADERSHIP_LOST = 1;
  }
}

// Status contains one of status messages.
message Status {
  oneof u {
    ClusterStatus c  = 1;
    ClientId      id = 2;
    MutexStatus   m  = 3;
    QueueStatus   q  = 4;
  }
}

// Stoa performs the storage operations.
service Stoa {

  // QueueSize returns size of the Queue.
  rpc QueueSize (Entity) returns (Value) {
    option(google.api.http) = {
      get: "/v1/queue/size/{entity_name}",
    };
  }

  // QueueClear cleares the Queue.
  rpc QueueClear (Entity) returns (Empty) {
    option(google.api.http) = {
      post: "/v1/queue/clear/{entity_name}",
    };
  }

  // QueueOffer offers the Value to the Queue.
  rpc QueueOffer (Value) returns (Result) {
    option(google.api.http) = {
      post: "/v1/queue/offer/{entity_name}",
      body: "*",
    };
  }

  // QueuePoll removes and returns the head of the Queue.
  rpc QueuePoll (Entity) returns (Value) {
    option(google.api.http) = {
      get: "/v1/queue/poll/{entity_name}",
    };
  }

  // QueuePeek returns the head of the Queue.
  rpc QueuePeek (Entity) returns (Value) {
    option(google.api.http) = {
      get: "/v1/queue/peek/{entity_name}",
    };
  }

  // DictionarySize returns size of the Dictionary.
  rpc DictionarySize (Entity) returns (Value) {
    option(google.api.http) = {
      get: "/v1/dictionary/size/{entity_name}",
    };
  }

  // DictionaryClear clears the Dictionary.
  rpc DictionaryClear (Entity) returns (Empty) {
    option(google.api.http) = {
      post: "/v1/dictionary/clear/{entity_name}",
    };
  }

  // DictionaryPutIfAbsent puts into the Dictionary the KeyValue if the key is
  // not present.
  rpc DictionaryPutIfAbsent (KeyValue) returns (Result) {
    option(google.api.http) = {
      post: "/v1/dictionary/putIfAbsent/{entity_name}",
      body: "*",
    };
  }

  // DictionaryPut puts into the Dictionary the KeyValue and returns the old
  // Value.
  rpc DictionaryPut (KeyValue) returns (Value) {
    option(google.api.http) = {
      post: "/v1/dictionary/put/{entity_name}",
      body: "*",
    };
  }

  // DictionaryGet returns from the Dictionary the Value specified by the Key.
  rpc DictionaryGet (Key) returns (Value) {
    option(google.api.http) = {
      get: "/v1/dictionary/get/{entity_name}/{key}",
    };
  }

  // DictionaryRemove removes from the Dictionary the key-value pair specified
  // by the Key.
  rpc DictionaryRemove (Key) returns (Result) {
    option(google.api.http) = {
      post: "/storage/dictionary/delete/{entity_name}/{key}",
    };
  }

  // DictionaryRange returns from the Dictionary all the key-value pairs.
  rpc DictionaryRange (Entity) returns (stream KeyValue) {
    option(google.api.http) = {
      get: "/v1/dictionary/range/{entity_name}",
    };
  }

  // MutexTryLock tries to lock the Mutex.
  rpc MutexTryLock (ClientId) returns (Result) {
    option(google.api.http) = {
      post: "/v1/mutex/trylock/{entity_name}",
      body: "*",
    };
  }

  // MutexUnlock unlocks the Mutex.
  rpc MutexUnlock (ClientId) returns (Result) {
    option(google.api.http) = {
      post: "/v1/mutex/unlock/{entity_name}",
      body: "*",
    };
  }

  // Watch watches the Cluster status.
  rpc Watch (ClientId) returns (stream Status) {
    option(google.api.http) = {
      post: "/v1/service/watch/{entity_name}",
    };
  }

  // Ping pings the Cluster.
  rpc Ping (ClientId) returns (Empty) {
    option(google.api.http) = {
      post: "/v1/service/ping/{entity_name}",
    };
  }
}
