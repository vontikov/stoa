// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StoaClient is the client API for Stoa service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoaClient interface {
	// QueueSize returns size of the Queue.
	QueueSize(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error)
	// QueueClear cleares the Queue.
	QueueClear(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error)
	// QueueOffer offers the Value to the Queue.
	QueueOffer(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Result, error)
	// QueuePoll removes and returns the head of the Queue.
	QueuePoll(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error)
	// QueuePeek returns the head of the Queue.
	QueuePeek(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error)
	// DictionarySize returns size of the Dictionary.
	DictionarySize(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error)
	// DictionaryClear clears the Dictionary.
	DictionaryClear(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error)
	// DictionaryPutIfAbsent puts into the Dictionary the KeyValue if the key is
	// not present.
	DictionaryPutIfAbsent(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Result, error)
	// DictionaryPut puts into the Dictionary the KeyValue and returns the old
	// Value.
	DictionaryPut(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Value, error)
	// DictionaryGet returns from the Dictionary the Value specified by the Key.
	DictionaryGet(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	// DictionaryRemove removes from the Dictionary the key-value pair specified
	// by the Key.
	DictionaryRemove(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Result, error)
	// DictionaryRange returns from the Dictionary all the key-value pairs.
	DictionaryRange(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Stoa_DictionaryRangeClient, error)
	// MutexTryLock tries to lock the Mutex.
	MutexTryLock(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Result, error)
	// MutexUnlock unlocks the Mutex.
	MutexUnlock(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Result, error)
	// Watch watches the Cluster status.
	Watch(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (Stoa_WatchClient, error)
	// Ping pings the Cluster.
	Ping(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error)
}

type stoaClient struct {
	cc grpc.ClientConnInterface
}

func NewStoaClient(cc grpc.ClientConnInterface) StoaClient {
	return &stoaClient{cc}
}

func (c *stoaClient) QueueSize(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/QueueSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) QueueClear(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/QueueClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) QueueOffer(ctx context.Context, in *Value, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/QueueOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) QueuePoll(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/QueuePoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) QueuePeek(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/QueuePeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) DictionarySize(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/DictionarySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) DictionaryClear(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/DictionaryClear", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) DictionaryPutIfAbsent(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/DictionaryPutIfAbsent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) DictionaryPut(ctx context.Context, in *KeyValue, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/DictionaryPut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) DictionaryGet(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/DictionaryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) DictionaryRemove(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/DictionaryRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) DictionaryRange(ctx context.Context, in *Entity, opts ...grpc.CallOption) (Stoa_DictionaryRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stoa_serviceDesc.Streams[0], "/github.com.vontikov.stoa.v1.Stoa/DictionaryRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &stoaDictionaryRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stoa_DictionaryRangeClient interface {
	Recv() (*KeyValue, error)
	grpc.ClientStream
}

type stoaDictionaryRangeClient struct {
	grpc.ClientStream
}

func (x *stoaDictionaryRangeClient) Recv() (*KeyValue, error) {
	m := new(KeyValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stoaClient) MutexTryLock(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/MutexTryLock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) MutexUnlock(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/MutexUnlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stoaClient) Watch(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (Stoa_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stoa_serviceDesc.Streams[1], "/github.com.vontikov.stoa.v1.Stoa/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &stoaWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stoa_WatchClient interface {
	Recv() (*Status, error)
	grpc.ClientStream
}

type stoaWatchClient struct {
	grpc.ClientStream
}

func (x *stoaWatchClient) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *stoaClient) Ping(ctx context.Context, in *ClientId, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Stoa/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoaServer is the server API for Stoa service.
// All implementations must embed UnimplementedStoaServer
// for forward compatibility
type StoaServer interface {
	// QueueSize returns size of the Queue.
	QueueSize(context.Context, *Entity) (*Value, error)
	// QueueClear cleares the Queue.
	QueueClear(context.Context, *Entity) (*Empty, error)
	// QueueOffer offers the Value to the Queue.
	QueueOffer(context.Context, *Value) (*Result, error)
	// QueuePoll removes and returns the head of the Queue.
	QueuePoll(context.Context, *Entity) (*Value, error)
	// QueuePeek returns the head of the Queue.
	QueuePeek(context.Context, *Entity) (*Value, error)
	// DictionarySize returns size of the Dictionary.
	DictionarySize(context.Context, *Entity) (*Value, error)
	// DictionaryClear clears the Dictionary.
	DictionaryClear(context.Context, *Entity) (*Empty, error)
	// DictionaryPutIfAbsent puts into the Dictionary the KeyValue if the key is
	// not present.
	DictionaryPutIfAbsent(context.Context, *KeyValue) (*Result, error)
	// DictionaryPut puts into the Dictionary the KeyValue and returns the old
	// Value.
	DictionaryPut(context.Context, *KeyValue) (*Value, error)
	// DictionaryGet returns from the Dictionary the Value specified by the Key.
	DictionaryGet(context.Context, *Key) (*Value, error)
	// DictionaryRemove removes from the Dictionary the key-value pair specified
	// by the Key.
	DictionaryRemove(context.Context, *Key) (*Result, error)
	// DictionaryRange returns from the Dictionary all the key-value pairs.
	DictionaryRange(*Entity, Stoa_DictionaryRangeServer) error
	// MutexTryLock tries to lock the Mutex.
	MutexTryLock(context.Context, *ClientId) (*Result, error)
	// MutexUnlock unlocks the Mutex.
	MutexUnlock(context.Context, *ClientId) (*Result, error)
	// Watch watches the Cluster status.
	Watch(*ClientId, Stoa_WatchServer) error
	// Ping pings the Cluster.
	Ping(context.Context, *ClientId) (*Empty, error)
	mustEmbedUnimplementedStoaServer()
}

// UnimplementedStoaServer must be embedded to have forward compatible implementations.
type UnimplementedStoaServer struct {
}

func (UnimplementedStoaServer) QueueSize(context.Context, *Entity) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueSize not implemented")
}
func (UnimplementedStoaServer) QueueClear(context.Context, *Entity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueClear not implemented")
}
func (UnimplementedStoaServer) QueueOffer(context.Context, *Value) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueOffer not implemented")
}
func (UnimplementedStoaServer) QueuePoll(context.Context, *Entity) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePoll not implemented")
}
func (UnimplementedStoaServer) QueuePeek(context.Context, *Entity) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueuePeek not implemented")
}
func (UnimplementedStoaServer) DictionarySize(context.Context, *Entity) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionarySize not implemented")
}
func (UnimplementedStoaServer) DictionaryClear(context.Context, *Entity) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryClear not implemented")
}
func (UnimplementedStoaServer) DictionaryPutIfAbsent(context.Context, *KeyValue) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryPutIfAbsent not implemented")
}
func (UnimplementedStoaServer) DictionaryPut(context.Context, *KeyValue) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryPut not implemented")
}
func (UnimplementedStoaServer) DictionaryGet(context.Context, *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryGet not implemented")
}
func (UnimplementedStoaServer) DictionaryRemove(context.Context, *Key) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DictionaryRemove not implemented")
}
func (UnimplementedStoaServer) DictionaryRange(*Entity, Stoa_DictionaryRangeServer) error {
	return status.Errorf(codes.Unimplemented, "method DictionaryRange not implemented")
}
func (UnimplementedStoaServer) MutexTryLock(context.Context, *ClientId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutexTryLock not implemented")
}
func (UnimplementedStoaServer) MutexUnlock(context.Context, *ClientId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutexUnlock not implemented")
}
func (UnimplementedStoaServer) Watch(*ClientId, Stoa_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedStoaServer) Ping(context.Context, *ClientId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedStoaServer) mustEmbedUnimplementedStoaServer() {}

// UnsafeStoaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoaServer will
// result in compilation errors.
type UnsafeStoaServer interface {
	mustEmbedUnimplementedStoaServer()
}

func RegisterStoaServer(s *grpc.Server, srv StoaServer) {
	s.RegisterService(&_Stoa_serviceDesc, srv)
}

func _Stoa_QueueSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).QueueSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/QueueSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).QueueSize(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_QueueClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).QueueClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/QueueClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).QueueClear(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_QueueOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).QueueOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/QueueOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).QueueOffer(ctx, req.(*Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_QueuePoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).QueuePoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/QueuePoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).QueuePoll(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_QueuePeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).QueuePeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/QueuePeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).QueuePeek(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_DictionarySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).DictionarySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/DictionarySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).DictionarySize(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_DictionaryClear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).DictionaryClear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/DictionaryClear",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).DictionaryClear(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_DictionaryPutIfAbsent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).DictionaryPutIfAbsent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/DictionaryPutIfAbsent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).DictionaryPutIfAbsent(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_DictionaryPut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).DictionaryPut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/DictionaryPut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).DictionaryPut(ctx, req.(*KeyValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_DictionaryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).DictionaryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/DictionaryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).DictionaryGet(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_DictionaryRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).DictionaryRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/DictionaryRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).DictionaryRemove(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_DictionaryRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoaServer).DictionaryRange(m, &stoaDictionaryRangeServer{stream})
}

type Stoa_DictionaryRangeServer interface {
	Send(*KeyValue) error
	grpc.ServerStream
}

type stoaDictionaryRangeServer struct {
	grpc.ServerStream
}

func (x *stoaDictionaryRangeServer) Send(m *KeyValue) error {
	return x.ServerStream.SendMsg(m)
}

func _Stoa_MutexTryLock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).MutexTryLock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/MutexTryLock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).MutexTryLock(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_MutexUnlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).MutexUnlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/MutexUnlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).MutexUnlock(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stoa_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StoaServer).Watch(m, &stoaWatchServer{stream})
}

type Stoa_WatchServer interface {
	Send(*Status) error
	grpc.ServerStream
}

type stoaWatchServer struct {
	grpc.ServerStream
}

func (x *stoaWatchServer) Send(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func _Stoa_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoaServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Stoa/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoaServer).Ping(ctx, req.(*ClientId))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stoa_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.vontikov.stoa.v1.Stoa",
	HandlerType: (*StoaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueSize",
			Handler:    _Stoa_QueueSize_Handler,
		},
		{
			MethodName: "QueueClear",
			Handler:    _Stoa_QueueClear_Handler,
		},
		{
			MethodName: "QueueOffer",
			Handler:    _Stoa_QueueOffer_Handler,
		},
		{
			MethodName: "QueuePoll",
			Handler:    _Stoa_QueuePoll_Handler,
		},
		{
			MethodName: "QueuePeek",
			Handler:    _Stoa_QueuePeek_Handler,
		},
		{
			MethodName: "DictionarySize",
			Handler:    _Stoa_DictionarySize_Handler,
		},
		{
			MethodName: "DictionaryClear",
			Handler:    _Stoa_DictionaryClear_Handler,
		},
		{
			MethodName: "DictionaryPutIfAbsent",
			Handler:    _Stoa_DictionaryPutIfAbsent_Handler,
		},
		{
			MethodName: "DictionaryPut",
			Handler:    _Stoa_DictionaryPut_Handler,
		},
		{
			MethodName: "DictionaryGet",
			Handler:    _Stoa_DictionaryGet_Handler,
		},
		{
			MethodName: "DictionaryRemove",
			Handler:    _Stoa_DictionaryRemove_Handler,
		},
		{
			MethodName: "MutexTryLock",
			Handler:    _Stoa_MutexTryLock_Handler,
		},
		{
			MethodName: "MutexUnlock",
			Handler:    _Stoa_MutexUnlock_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Stoa_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DictionaryRange",
			Handler:       _Stoa_DictionaryRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _Stoa_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stoa.proto",
}
