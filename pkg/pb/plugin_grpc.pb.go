// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// EvictionClient is the client API for Eviction service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EvictionClient interface {
	Queue(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*Result, error)
	Dictionary(ctx context.Context, in *DictionaryEntry, opts ...grpc.CallOption) (*Result, error)
}

type evictionClient struct {
	cc grpc.ClientConnInterface
}

func NewEvictionClient(cc grpc.ClientConnInterface) EvictionClient {
	return &evictionClient{cc}
}

func (c *evictionClient) Queue(ctx context.Context, in *QueueEntry, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Eviction/Queue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *evictionClient) Dictionary(ctx context.Context, in *DictionaryEntry, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/github.com.vontikov.stoa.v1.Eviction/Dictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EvictionServer is the server API for Eviction service.
// All implementations must embed UnimplementedEvictionServer
// for forward compatibility
type EvictionServer interface {
	Queue(context.Context, *QueueEntry) (*Result, error)
	Dictionary(context.Context, *DictionaryEntry) (*Result, error)
	mustEmbedUnimplementedEvictionServer()
}

// UnimplementedEvictionServer must be embedded to have forward compatible implementations.
type UnimplementedEvictionServer struct {
}

func (UnimplementedEvictionServer) Queue(context.Context, *QueueEntry) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedEvictionServer) Dictionary(context.Context, *DictionaryEntry) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dictionary not implemented")
}
func (UnimplementedEvictionServer) mustEmbedUnimplementedEvictionServer() {}

// UnsafeEvictionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EvictionServer will
// result in compilation errors.
type UnsafeEvictionServer interface {
	mustEmbedUnimplementedEvictionServer()
}

func RegisterEvictionServer(s *grpc.Server, srv EvictionServer) {
	s.RegisterService(&_Eviction_serviceDesc, srv)
}

func _Eviction_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvictionServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Eviction/Queue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvictionServer).Queue(ctx, req.(*QueueEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Eviction_Dictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DictionaryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EvictionServer).Dictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.vontikov.stoa.v1.Eviction/Dictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EvictionServer).Dictionary(ctx, req.(*DictionaryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

var _Eviction_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.vontikov.stoa.v1.Eviction",
	HandlerType: (*EvictionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Queue",
			Handler:    _Eviction_Queue_Handler,
		},
		{
			MethodName: "Dictionary",
			Handler:    _Eviction_Dictionary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
